const express = require('express');
const cors = require('cors');
const { PrismaClient } = require('@prisma/client');

const app = express();
const PORT = process.env.PORT || 3011;
const prisma = new PrismaClient();

// Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TELEGRAM_BOT_TOKEN = '8159006212:AAEjYn-bU-Nh89crlue9GUJKuv6pV4Z986M';
const TELEGRAM_CHAT_ID = '-4729817036';
const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;

// Middleware
app.use(cors({
  origin: ['http://localhost:3000', 'http://localhost:3001'],
  credentials: true
}));
app.use(express.json());

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫—É–ø–æ–∫ –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
let purchases = [];

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram —Å –∫–Ω–æ–ø–∫–∞–º–∏
async function sendTelegramNotification(purchase) {
  try {
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const isUrgent = purchase.isUrgent;
    const title = isUrgent ? 'üî• –°–†–û–ß–ù–ê–Ø –ó–ê–ö–£–ü–ö–ê' : 'üì¶ –ù–û–í–ê–Ø –ó–ê–ö–£–ü–ö–ê';
    const purchaseNumber = `#${purchase.id.split('_')[1]}`;

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é
    const itemsList = purchase.items.map(item =>
      `‚Ä¢ ${item.name} ‚Äî ${item.quantity} —à—Ç. √ó ${item.price} ‚Ç∫ = ${item.total} ‚Ç∫ (—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å)`
    ).join('\n');

    // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –≤ –ª–∏—Ä–∞—Ö
    const totalTRY = purchase.items.reduce((sum, item) => sum + item.total, 0);

    // –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = `${title} ${purchaseNumber}

üí∞ –ò—Ç–æ–≥–æ: ${totalTRY} ‚Ç∫
üìä –°—Ç–∞—Ç—É—Å: –°–æ–∑–¥–∞–Ω–∞

üìã –°–ü–ò–°–û–ö –¢–û–í–ê–†–û–í:
${itemsList}

‚è∞ –°–æ–∑–¥–∞–Ω–æ: ${new Date(purchase.createdAt).toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })}`;

    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫—É–ø–∫–∏
    const keyboard = {
      inline_keyboard: [[
        {
          text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å',
          callback_data: `accept_${purchase.id}`
        }
      ]]
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    const response = await fetch(TELEGRAM_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'HTML',
        reply_markup: keyboard
      })
    });

    const data = await response.json();

    if (data.ok) {
      console.log('‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      purchase.telegramMessageId = data.result.message_id;
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', data);
    }

    return data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', error);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –µ—Å–ª–∏ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    return null;
  }
}

// POST /api/purchases - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–∫—É–ø–∫–∏
app.post('/api/purchases', async (req, res) => {
  try {
    const { isUrgent, items } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!items || !Array.isArray(items) || items.length === 0) {
      return res.status(400).json({
        success: false,
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ items —Å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∏–º —Ç–æ–≤–∞—Ä–æ–º'
      });
    }

    // –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã
    const totalCost = items.reduce((sum, item) => sum + (item.total || 0), 0);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫—É–ø–∫—É –≤ –ø–∞–º—è—Ç–∏ (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ë–î –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–∞–≤–∞–º–∏)
    const purchase = {
      id: `purchase_${Date.now()}`,
      createdAt: new Date().toISOString(),
      totalCost,
      isUrgent: isUrgent || false,
      items: items.map((item, idx) => ({
        id: `item_${Date.now()}_${idx}`,
        productId: item.productId || null,
        name: item.name,
        quantity: item.quantity,
        price: item.price,
        total: item.total
      }))
    };

    purchases.push(purchase);

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–∫—É–ø–∫–∞ #${purchase.id} –Ω–∞ —Å—É–º–º—É ${totalCost} ‚Ç∫`);
    console.log('üì¶ –¢–æ–≤–∞—Ä—ã:', items.map(i => `${i.name} x${i.quantity}`).join(', '));

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç)
    sendTelegramNotification(purchase).then(() => {
      console.log('üì± –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –∑–∞–≤–µ—Ä—à–µ–Ω');
    }).catch(error => {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
    });

    res.status(201).json({
      success: true,
      data: purchase
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫—É–ø–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫—É–ø–∫–∏'
    });
  }
});

// GET /api/purchases - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫—É–ø–æ–∫
app.get('/api/purchases', (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const offset = (page - 1) * limit;

    // –§–∏–ª—å—Ç—Ä—ã
    let filteredPurchases = [...purchases];

    if (req.query.isUrgent === 'true') {
      filteredPurchases = filteredPurchases.filter(p => p.isUrgent === true);
    } else if (req.query.isUrgent === 'false') {
      filteredPurchases = filteredPurchases.filter(p => p.isUrgent === false);
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
    filteredPurchases.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    const paginatedPurchases = filteredPurchases.slice(offset, offset + limit);

    res.json({
      success: true,
      data: {
        purchases: paginatedPurchases,
        pagination: {
          page,
          limit,
          total: filteredPurchases.length,
          totalPages: Math.ceil(filteredPurchases.length / limit)
        }
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫—É–ø–æ–∫:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫—É–ø–æ–∫'
    });
  }
});

// GET /api/purchases/:id - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫—É–ø–∫–∏
app.get('/api/purchases/:id', (req, res) => {
  try {
    const { id } = req.params;
    const purchase = purchases.find(p => p.id === id);

    if (!purchase) {
      return res.status(404).json({
        success: false,
        error: '–ó–∞–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    res.json({
      success: true,
      data: purchase
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫—É–ø–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫—É–ø–∫–∏'
    });
  }
});

// PATCH /api/purchases/:id/status - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫—É–ø–∫–∏
app.patch('/api/purchases/:id/status', (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;

    const purchaseIndex = purchases.findIndex(p => p.id === id);

    if (purchaseIndex === -1) {
      return res.status(404).json({
        success: false,
        error: '–ó–∞–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    purchases[purchaseIndex].status = status;
    purchases[purchaseIndex].updatedAt = new Date().toISOString();

    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–∫—É–ø–∫–∏ #${id}: ${status}`);

    res.json({
      success: true,
      data: purchases[purchaseIndex]
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞'
    });
  }
});

// POST /api/telegram/webhook - –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback_query –æ—Ç Telegram
app.post('/api/telegram/webhook', async (req, res) => {
  try {
    const update = req.body;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ callback_query
    if (update.callback_query) {
      const callbackQuery = update.callback_query;
      const { id, from, message, data } = callbackQuery;

      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
      const [action, ...purchaseIdParts] = data.split('_');
      const purchaseId = purchaseIdParts.join('_');

      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫—É–ø–∫—É
      const purchase = purchases.find(p => p.id === purchaseId);
      if (!purchase) {
        await answerCallbackQuery(id, '–ó–∞–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return res.json({ ok: true });
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
      const statusFlow = {
        'accept': { newStatus: '–ø—Ä–∏–Ω—è—Ç–∞', text: '‚úÖ –ü—Ä–∏–Ω—è—Ç–∞', nextButton: { text: 'üì¶ –¢–æ–≤–∞—Ä –≥–æ—Ç–æ–≤', callback: 'ready' } },
        'ready': { newStatus: '–≥–æ—Ç–æ–≤', text: 'üì¶ –¢–æ–≤–∞—Ä –≥–æ—Ç–æ–≤', nextButton: { text: 'üí∞ –ù—É–∂–Ω–∞ –æ–ø–ª–∞—Ç–∞', callback: 'payment' } },
        'payment': { newStatus: '–æ–∂–∏–¥–∞–µ—Ç_–æ–ø–ª–∞—Ç—ã', text: 'üí∞ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã', nextButton: { text: 'üí≥ –Ø –æ–ø–ª–∞—Ç–∏–ª', callback: 'paid' } },
        'paid': { newStatus: '–≤_–ø—É—Ç–∏', text: 'üöö –í –ø—É—Ç–∏', nextButton: null }
      };

      const statusInfo = statusFlow[action];
      if (!statusInfo) {
        await answerCallbackQuery(id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
        return res.json({ ok: true });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      purchase.status = statusInfo.newStatus;
      purchase.updatedAt = new Date().toISOString();

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
      await updateTelegramMessage(message.chat.id, message.message_id, purchase, statusInfo);

      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
      await answerCallbackQuery(id, `–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${statusInfo.text}`);

      console.log(`üì± –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–∫—É–ø–∫–∏ ${purchaseId}: ${statusInfo.newStatus} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${from.first_name})`);
    }

    res.json({ ok: true });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
    res.status(500).json({ ok: false, error: 'Webhook processing error' });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback_query
async function answerCallbackQuery(callbackQueryId, text) {
  try {
    await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        callback_query_id: callbackQueryId,
        text: text,
        show_alert: false
      })
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function updateTelegramMessage(chatId, messageId, purchase, statusInfo) {
  try {
    const isUrgent = purchase.isUrgent;
    const title = isUrgent ? 'üî• –°–†–û–ß–ù–ê–Ø –ó–ê–ö–£–ü–ö–ê' : 'üì¶ –ù–û–í–ê–Ø –ó–ê–ö–£–ü–ö–ê';
    const purchaseNumber = `#${purchase.id.split('_')[1]}`;

    const itemsList = purchase.items.map(item =>
      `‚Ä¢ ${item.name} ‚Äî ${item.quantity} —à—Ç. √ó ${item.price} ‚Ç∫ = ${item.total} ‚Ç∫ (—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å)`
    ).join('\n');

    const totalTRY = purchase.items.reduce((sum, item) => sum + item.total, 0);

    const message = `${title} ${purchaseNumber}

üí∞ –ò—Ç–æ–≥–æ: ${totalTRY} ‚Ç∫
üìä –°—Ç–∞—Ç—É—Å: ${statusInfo.text}

üìã –°–ü–ò–°–û–ö –¢–û–í–ê–†–û–í:
${itemsList}

‚è∞ –°–æ–∑–¥–∞–Ω–æ: ${new Date(purchase.createdAt).toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })}`;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    const keyboard = statusInfo.nextButton ? {
      inline_keyboard: [[
        {
          text: statusInfo.nextButton.text,
          callback_data: `${statusInfo.nextButton.callback}_${purchase.id}`
        }
      ]]
    } : null;

    await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/editMessageText`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        message_id: messageId,
        text: message,
        parse_mode: 'HTML',
        reply_markup: keyboard
      })
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
}

// POST /api/telegram/test - —Ç–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram
app.post('/api/telegram/test', async (req, res) => {
  try {
    const testPurchase = {
      id: 'purchase_test_' + Date.now(),
      createdAt: new Date().toISOString(),
      isUrgent: true,
      items: [
        { name: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 1', quantity: 5, price: 100, total: 500 },
        { name: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 2', quantity: 3, price: 200, total: 600 }
      ]
    };

    const result = await sendTelegramNotification(testPurchase);

    res.json({
      success: true,
      message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
      telegramResponse: result
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è'
    });
  }
});

// Health check
app.get('/health', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    purchasesCount: purchases.length,
    telegramConfigured: !!TELEGRAM_BOT_TOKEN && !!TELEGRAM_CHAT_ID
  });
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({ error: 'Route not found' });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ Purchases API Server running on http://localhost:${PORT}`);
  console.log(`üìã Purchases API: http://localhost:${PORT}/api/purchases`);
  console.log(`üíö Health check: http://localhost:${PORT}/health`);
  console.log(`üì± Telegram bot: ${TELEGRAM_BOT_TOKEN ? 'Configured ‚úÖ' : 'Not configured ‚ùå'}`);
  console.log('\nüì¶ –ó–∞–∫—É–ø–∫–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏ (–Ω–µ –≤ –ë–î)');
});

// Graceful shutdown
process.on('SIGTERM', async () => {
  console.log('SIGTERM received, shutting down gracefully...');
  await prisma.$disconnect();
  process.exit(0);
});
