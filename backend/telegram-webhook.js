// Telegram Webhook Handler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫—É–ø–æ–∫

const TELEGRAM_BOT_TOKEN = '8159006212:AAEjYn-bU-Nh89crlue9GUJKuv6pV4Z986M';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç–∞—Ç—É—Å–∞
async function sendPurchaseWithButtons(purchase, chatId) {
  const isUrgent = purchase.isUrgent;
  const title = isUrgent ? 'üî• –°–†–û–ß–ù–ê–Ø –ó–ê–ö–£–ü–ö–ê' : 'üì¶ –ù–û–í–ê–Ø –ó–ê–ö–£–ü–ö–ê';
  const purchaseNumber = `#${purchase.id.split('_')[1]}`;

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
  const itemsList = purchase.items.map(item =>
    `‚Ä¢ ${item.name} ‚Äî ${item.quantity} —à—Ç. √ó ${item.price} ‚Ç∫ = ${item.total} ‚Ç∫`
  ).join('\n');

  const totalTRY = purchase.items.reduce((sum, item) => sum + item.total, 0);

  const message = `${title} ${purchaseNumber}

üí∞ –ò—Ç–æ–≥–æ: ${totalTRY} ‚Ç∫
üìä –°—Ç–∞—Ç—É—Å: –°–æ–∑–¥–∞–Ω–∞

üìã –°–ü–ò–°–û–ö –¢–û–í–ê–†–û–í:
${itemsList}

‚è∞ –°–æ–∑–¥–∞–Ω–æ: ${new Date(purchase.createdAt).toLocaleString('ru-RU', {
    timeZone: 'Europe/Moscow',
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  })}`;

  // –ö–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
  const keyboard = {
    inline_keyboard: [[
      {
        text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å',
        callback_data: `accept_${purchase.id}`
      }
    ]]
  };

  const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      chat_id: chatId,
      text: message,
      parse_mode: 'HTML',
      reply_markup: keyboard
    })
  });

  return await response.json();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
async function updatePurchaseMessage(chatId, messageId, purchase, newStatus) {
  const statusMap = {
    '–ø—Ä–∏–Ω—è—Ç–∞': { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç–∞', nextButton: { text: 'üì¶ –¢–æ–≤–∞—Ä –≥–æ—Ç–æ–≤', callback: 'ready' } },
    '–≥–æ—Ç–æ–≤': { text: 'üì¶ –¢–æ–≤–∞—Ä –≥–æ—Ç–æ–≤', nextButton: { text: 'üí∞ –ù—É–∂–Ω–∞ –æ–ø–ª–∞—Ç–∞', callback: 'payment' } },
    '–æ–∂–∏–¥–∞–µ—Ç_–æ–ø–ª–∞—Ç—ã': { text: 'üí∞ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã', nextButton: { text: 'üí≥ –Ø –æ–ø–ª–∞—Ç–∏–ª', callback: 'paid' } },
    '–≤_–ø—É—Ç–∏': { text: 'üöö –í –ø—É—Ç–∏', nextButton: null }
  };

  const status = statusMap[newStatus] || { text: newStatus, nextButton: null };
  const isUrgent = purchase.isUrgent;
  const title = isUrgent ? 'üî• –°–†–û–ß–ù–ê–Ø –ó–ê–ö–£–ü–ö–ê' : 'üì¶ –ù–û–í–ê–Ø –ó–ê–ö–£–ü–ö–ê';
  const purchaseNumber = `#${purchase.id.split('_')[1]}`;

  const itemsList = purchase.items.map(item =>
    `‚Ä¢ ${item.name} ‚Äî ${item.quantity} —à—Ç. √ó ${item.price} ‚Ç∫ = ${item.total} ‚Ç∫`
  ).join('\n');

  const totalTRY = purchase.items.reduce((sum, item) => sum + item.total, 0);

  const message = `${title} ${purchaseNumber}

üí∞ –ò—Ç–æ–≥–æ: ${totalTRY} ‚Ç∫
üìä –°—Ç–∞—Ç—É—Å: ${status.text}

üìã –°–ü–ò–°–û–ö –¢–û–í–ê–†–û–í:
${itemsList}

‚è∞ –°–æ–∑–¥–∞–Ω–æ: ${new Date(purchase.createdAt).toLocaleString('ru-RU', {
    timeZone: 'Europe/Moscow',
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  })}`;

  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
  const keyboard = status.nextButton ? {
    inline_keyboard: [[
      {
        text: status.nextButton.text,
        callback_data: `${status.nextButton.callback}_${purchase.id}`
      }
    ]]
  } : null;

  const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/editMessageText`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      chat_id: chatId,
      message_id: messageId,
      text: message,
      parse_mode: 'HTML',
      reply_markup: keyboard
    })
  });

  return await response.json();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –æ—Ç –∫–Ω–æ–ø–æ–∫
async function handleCallbackQuery(callbackQuery, purchases) {
  const { id, from, message, data } = callbackQuery;

  // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
  const [action, ...purchaseIdParts] = data.split('_');
  const purchaseId = purchaseIdParts.join('_');

  // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫—É–ø–∫—É
  const purchase = purchases.find(p => p.id === purchaseId);
  if (!purchase) {
    await answerCallbackQuery(id, '–ó–∞–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
  let newStatus;
  switch (action) {
    case 'accept':
      newStatus = '–ø—Ä–∏–Ω—è—Ç–∞';
      break;
    case 'ready':
      newStatus = '–≥–æ—Ç–æ–≤';
      break;
    case 'payment':
      newStatus = '–æ–∂–∏–¥–∞–µ—Ç_–æ–ø–ª–∞—Ç—ã';
      break;
    case 'paid':
      newStatus = '–≤_–ø—É—Ç–∏';
      break;
    default:
      await answerCallbackQuery(id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
      return;
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
  purchase.status = newStatus;
  purchase.updatedAt = new Date().toISOString();

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  await updatePurchaseMessage(message.chat.id, message.message_id, purchase, newStatus);

  // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
  await answerCallbackQuery(id, `–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${getStatusText(newStatus)}`);

  console.log(`üì± –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–∫—É–ø–∫–∏ ${purchaseId}: ${newStatus} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${from.first_name})`);
}

// –û—Ç–≤–µ—Ç –Ω–∞ callback_query
async function answerCallbackQuery(callbackQueryId, text) {
  await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      callback_query_id: callbackQueryId,
      text: text,
      show_alert: false
    })
  });
}

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
function getStatusText(status) {
  const statusMap = {
    '–ø—Ä–∏–Ω—è—Ç–∞': '‚úÖ –ü—Ä–∏–Ω—è—Ç–∞',
    '–≥–æ—Ç–æ–≤': 'üì¶ –¢–æ–≤–∞—Ä –≥–æ—Ç–æ–≤',
    '–æ–∂–∏–¥–∞–µ—Ç_–æ–ø–ª–∞—Ç—ã': 'üí∞ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
    '–≤_–ø—É—Ç–∏': 'üöö –í –ø—É—Ç–∏'
  };
  return statusMap[status] || status;
}

module.exports = {
  sendPurchaseWithButtons,
  handleCallbackQuery,
  updatePurchaseMessage
};
