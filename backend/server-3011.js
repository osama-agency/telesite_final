const express = require('express');
const cors = require('cors');

const app = express();
const PORT = 3011;

app.use(cors());
app.use(express.json());

// –í–Ω–µ—à–Ω–∏–π API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const EXTERNAL_API = {
  BASE_URL: 'https://strattera.tgapp.online/api/v1',
  AUTH_TOKEN: '8cM9wVBrY3p56k4L1VBpIBwOsw'
};

// –ö—ç—à –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API
let cachedOrders = [];
let lastOrdersFetchTime = 0;
const ORDERS_CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

// –§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ —Å –≤–Ω–µ—à–Ω–∏–º API
async function syncOrdersFromExternalAPI() {
  try {
    console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ —Å –≤–Ω–µ—à–Ω–∏–º API...');

    const fetch = (await import('node-fetch')).default;
    const response = await fetch(`${EXTERNAL_API.BASE_URL}/orders`, {
      headers: {
        'Authorization': EXTERNAL_API.AUTH_TOKEN,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const externalOrders = await response.json();
    console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ ${externalOrders.length} –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API`);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–µ –∑–∞–∫–∞–∑—ã –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
    cachedOrders = externalOrders.map(order => ({
      id: order.id.toString(),
      externalId: order.id.toString(),
      customerName: order.user?.full_name?.trim() || '–ù–µ —É–∫–∞–∑–∞–Ω',
      customerEmail: `user${order.user?.id}@customer.com`,
      customerPhone: '–ù–µ —É–∫–∞–∑–∞–Ω',
      customerCity: order.user?.city || '–ù–µ —É–∫–∞–∑–∞–Ω',
      bankCard: order.bank_card || '–ù–µ —É–∫–∞–∑–∞–Ω',
      status: order.status || 'processing',
      total: order.total_amount || '0',
      currency: 'RUB',
      bonus: order.bonus || 0,
      deliveryCost: order.delivery_cost || 0,
      orderDate: order.created_at || new Date().toISOString(),
      paidAt: order.paid_at || null,
      shippedAt: order.shipped_at || null,
      createdAt: order.created_at || new Date().toISOString(),
      updatedAt: order.created_at || new Date().toISOString(),
      items: order.order_items?.map((item, index) => ({
        id: `${order.id}_${index}`,
        orderId: order.id.toString(),
        productId: index.toString(),
        name: item.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä',
        quantity: item.quantity || 1,
        price: item.price || '0',
        total: (parseFloat(item.price || '0') * (item.quantity || 1)).toString(),
        createdAt: order.created_at || new Date().toISOString(),
        updatedAt: order.created_at || new Date().toISOString()
      })) || []
    }));

    lastOrdersFetchTime = Date.now();
    console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${cachedOrders.length} –∑–∞–∫–∞–∑–æ–≤`);

    return cachedOrders;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
    // –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫—ç—à –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    return cachedOrders.length > 0 ? cachedOrders : [];
  }
}

// Mock orders data (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ fallback)
const mockOrders = [
  {
    id: '1',
    externalId: '1192',
    customerName: '–û—Å—Ç—Ä–æ–≤—Å–∫–∏–π –î–∞–Ω–∏–ª –ò–≥–æ—Ä–µ–≤–∏—á',
    customerEmail: 'danil@example.com',
    customerPhone: '+7 921 123 45 67',
    status: 'shipped',
    total: '6000',
    currency: 'RUB',
    orderDate: '2025-06-05T10:00:00Z',
    createdAt: '2025-06-05T10:00:00Z',
    updatedAt: '2025-06-05T10:00:00Z',
    items: [
      {
        id: '1',
        orderId: '1',
        productId: '1',
        name: 'Atomine—Ö 25 mg',
        quantity: 1,
        price: '6000',
        total: '6000',
        createdAt: '2025-06-05T10:00:00Z',
        updatedAt: '2025-06-05T10:00:00Z'
      }
    ]
  }
];

// GET /api/orders
app.get('/api/orders', async (req, res) => {
  try {
    console.log('üìã Orders request received');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à –∑–∞–∫–∞–∑–æ–≤
    const now = Date.now();
    if (cachedOrders.length === 0 || (now - lastOrdersFetchTime) > ORDERS_CACHE_DURATION) {
      await syncOrdersFromExternalAPI();
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API –∏–ª–∏ fallback –∫ mock –¥–∞–Ω–Ω—ã–º
    const ordersToReturn = cachedOrders.length > 0 ? cachedOrders : mockOrders;

    const response = {
      success: true,
      data: {
        orders: ordersToReturn,
        pagination: {
          page: 1,
          limit: 1000,
          total: ordersToReturn.length,
          pages: 1
        }
      }
    };

    res.json(response);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);

    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ
    const response = {
      success: true,
      data: {
        orders: mockOrders,
        pagination: {
          page: 1,
          limit: 1000,
          total: mockOrders.length,
          pages: 1
        }
      }
    };

    res.json(response);
  }
});

// GET /api/orders/:id - –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ ID
app.get('/api/orders/:id', async (req, res) => {
  try {
    const orderId = req.params.id;
    console.log(`üîç –ó–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–∞ –ø–æ ID: ${orderId}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à –∑–∞–∫–∞–∑–æ–≤
    const now = Date.now();
    if (cachedOrders.length === 0 || (now - lastOrdersFetchTime) > ORDERS_CACHE_DURATION) {
      await syncOrdersFromExternalAPI();
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API –∏–ª–∏ fallback –∫ mock –¥–∞–Ω–Ω—ã–º
    const ordersToSearch = cachedOrders.length > 0 ? cachedOrders : mockOrders;

    // –ò—â–µ–º –∑–∞–∫–∞–∑ –ø–æ ID
    const order = ordersToSearch.find(o => o.id === orderId || o.externalId === orderId);

    if (!order) {
      console.log(`‚ùå –ó–∞–∫–∞–∑ ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);

      return res.status(404).json({
        success: false,
        error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω',
        message: `–ó–∞–∫–∞–∑ —Å ID ${orderId} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`
      });
    }

    console.log(`‚úÖ –ó–∞–∫–∞–∑ ${orderId} –Ω–∞–π–¥–µ–Ω: ${order.customerName}`);

    const response = {
      success: true,
      data: {
        order: order
      }
    };

    res.json(response);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ ID:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞',
      message: error.message
    });
  }
});

// POST /api/sync-orders
app.post('/api/sync-orders', async (req, res) => {
  try {
    console.log('üîÑ Sync orders request received');

    const syncedOrders = await syncOrdersFromExternalAPI();

    res.json({
      success: true,
      imported: syncedOrders.length,
      message: 'Orders synced successfully from external API',
      lastSync: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤',
      message: error.message
    });
  }
});

// –ö—ç—à –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
let cachedRates = null;
let lastFetchTime = 0;
const CACHE_DURATION = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
const BUFFER_PERCENT = 0.05; // 5% –±—É—Ñ–µ—Ä

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –æ—Ç –¶–ë –†–§
async function fetchCurrencyFromCBR() {
  try {
    console.log('üè¶ –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞ –ª–∏—Ä—ã –æ—Ç –¶–ë –†–§...');

    const fetch = (await import('node-fetch')).default;
    const response = await fetch('https://www.cbr-xml-daily.ru/daily_json.js');

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();

        // –ö—É—Ä—Å —Ç—É—Ä–µ—Ü–∫–æ–π –ª–∏—Ä—ã (TRY)
    const tryRate = data.Valute?.TRY;
    if (!tryRate) {
      throw new Error('TRY currency not found in CBR response');
    }

    // –¶–ë –¥–∞–µ—Ç –∫—É—Ä—Å –∑–∞ tryRate.Nominal —Ç—É—Ä–µ—Ü–∫–∏—Ö –ª–∏—Ä (–æ–±—ã—á–Ω–æ 10)
    const rubPerTry = tryRate.Value / tryRate.Nominal;
    console.log(`üí± –ö—É—Ä—Å –¶–ë: 1 ‚Ç∫ = ${rubPerTry.toFixed(4)} ‚ÇΩ (–∑–∞ ${tryRate.Nominal} –ª–∏—Ä: ${tryRate.Value} ‚ÇΩ)`);

    return rubPerTry;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –æ—Ç –¶–ë:', error);
    // Fallback –∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º—É –∫—É—Ä—Å—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return 3.45;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∫—É—Ä—Å–æ–≤
async function updateCurrencyCache() {
  try {
    const currentRate = await fetchCurrencyFromCBR();
    const currentWithBuffer = currentRate * (1 + BUFFER_PERCENT);
    const average30Days = currentRate * (1 + (Math.random() - 0.5) * 0.1); // –∏–º–∏—Ç–∞—Ü–∏—è

    cachedRates = {
      current: currentRate,
      currentWithBuffer: currentWithBuffer,
      average30Days: average30Days,
      buffer: BUFFER_PERCENT,
      lastUpdate: new Date().toISOString(),
      source: '–¶–ë –†–§'
    };

    lastFetchTime = Date.now();

    console.log(`‚úÖ –ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:
      - –¢–µ–∫—É—â–∏–π: ${currentRate.toFixed(4)} ‚ÇΩ/‚Ç∫
      - –° –±—É—Ñ–µ—Ä–æ–º (+5%): ${currentWithBuffer.toFixed(4)} ‚ÇΩ/‚Ç∫
      - –°—Ä–µ–¥–Ω–∏–π –∑–∞ 30 –¥–Ω–µ–π: ${average30Days.toFixed(4)} ‚ÇΩ/‚Ç∫`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∫—É—Ä—Å–æ–≤:', error);
  }
}

// API –≤–∞–ª—é—Ç–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
app.get('/api/currency/rates', async (req, res) => {
  try {
    console.log('üí∞ –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à
    const now = Date.now();
    if (!cachedRates || (now - lastFetchTime) > CACHE_DURATION) {
      await updateCurrencyCache();
    }

    if (!cachedRates) {
      // –ï—Å–ª–∏ –∫—ç—à –≤—Å–µ –µ—â–µ –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      cachedRates = {
        current: 3.45,
        currentWithBuffer: 3.45 * (1 + BUFFER_PERCENT),
        average30Days: 3.42,
        buffer: BUFFER_PERCENT,
        lastUpdate: new Date().toISOString(),
        source: 'Fallback'
      };
    }

    res.json({
      success: true,
      data: {
        current: parseFloat(cachedRates.current.toFixed(4)),
        currentWithBuffer: parseFloat(cachedRates.currentWithBuffer.toFixed(4)),
        average30Days: parseFloat(cachedRates.average30Days.toFixed(4)),
        buffer: cachedRates.buffer,
        lastUpdate: cachedRates.lastUpdate,
        source: cachedRates.source,
        nextUpdate: new Date(lastFetchTime + CACHE_DURATION).toISOString()
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç'
    });
  }
});

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤
app.post('/api/currency/refresh', async (req, res) => {
  try {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤...');
    await updateCurrencyCache();

    res.json({
      success: true,
      message: '–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
      data: cachedRates
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç'
    });
  }
});

// –í –ø–∞–º—è—Ç–∏ —Ö—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤
let productPrices = {};

// –í –ø–∞–º—è—Ç–∏ —Ö—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∫—Ä—ã—Ç—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
let hiddenProducts = new Set(); // –ù–∞–∑–≤–∞–Ω–∏—è —Å–∫—Ä—ã—Ç—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤

// –í –ø–∞–º—è—Ç–∏ —Ö—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫—É–ø–æ–∫
let purchaseHistory = [];
let purchaseIdCounter = 1;

// POST /api/prices/:productName - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
app.post('/api/prices/:productName', (req, res) => {
  try {
    const productName = decodeURIComponent(req.params.productName);
    const priceData = req.body;

    console.log(`üí∞ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞: ${productName}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ –±—ã–ª–∞ –±—ã –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
    productPrices[productName] = {
      ...priceData,
      savedAt: new Date().toISOString()
    };

    res.json({
      success: true,
      message: '–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞',
      productName: productName,
      data: productPrices[productName]
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞'
    });
  }
});

// GET /api/prices/:productName - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
app.get('/api/prices/:productName', (req, res) => {
  try {
    const productName = decodeURIComponent(req.params.productName);
    const priceData = productPrices[productName];

    if (!priceData) {
      return res.status(404).json({
        success: false,
        message: '–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    res.json({
      success: true,
      data: priceData
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞'
    });
  }
});

// POST /api/products/hide - —Å–∫—Ä—ã—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
app.post('/api/products/hide', (req, res) => {
  try {
    const { productName, isHidden } = req.body;

    console.log(`üëÅÔ∏è ${isHidden ? '–°–∫—Ä—ã—Ç–∏–µ' : '–ü–æ–∫–∞–∑'} —Ç–æ–≤–∞—Ä–∞: ${productName}`);

    if (isHidden) {
      hiddenProducts.add(productName);
    } else {
      hiddenProducts.delete(productName);
    }

    res.json({
      success: true,
      message: `–¢–æ–≤–∞—Ä "${productName}" ${isHidden ? '—Å–∫—Ä—ã—Ç' : '–ø–æ–∫–∞–∑–∞–Ω'}`,
      productName: productName,
      isHidden: isHidden
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä—ã—Ç–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–∫—Ä—ã—Ç–∏—è —Ç–æ–≤–∞—Ä–∞'
    });
  }
});

// GET /api/products/hidden - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫—Ä—ã—Ç—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
app.get('/api/products/hidden', (req, res) => {
  try {
    console.log('üìã –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–∫—Ä—ã—Ç—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤');

    res.json({
      success: true,
      hiddenProducts: Array.from(hiddenProducts)
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä—ã—Ç—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä—ã—Ç—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤'
    });
  }
});

// API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫—É–ø–∫–∞–º–∏

// POST /api/purchases - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–∫—É–ø–∫—É
app.post('/api/purchases', (req, res) => {
  try {
    const { supplier, items, totalAmount, expectedDeliveryDate, comments, priority } = req.body;

    console.log(`üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–∫—É–ø–∫–∏ –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: ${supplier}`);

    const newPurchase = {
      id: purchaseIdCounter++,
      supplier: supplier || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫',
      items: items || [],
      totalAmount: totalAmount || 0,
      expectedDeliveryDate: expectedDeliveryDate,
      comments: comments || '',
      priority: priority || 'normal',
      status: '—Å–æ–∑–¥–∞–Ω–∞',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    purchaseHistory.push(newPurchase);

    console.log(`‚úÖ –ó–∞–∫—É–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${newPurchase.id}, —Ç–æ–≤–∞—Ä–æ–≤: ${items?.length || 0}, —Å—É–º–º–∞: ${totalAmount || 0} ‚ÇΩ`);

    res.json({
      success: true,
      message: '–ó–∞–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
      data: newPurchase
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫—É–ø–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫—É–ø–∫–∏'
    });
  }
});

// GET /api/purchases - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫—É–ø–æ–∫
app.get('/api/purchases', (req, res) => {
  try {
    console.log('üìã –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∑–∞–∫—É–ø–æ–∫');

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
    const sortedPurchases = purchaseHistory.sort((a, b) =>
      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
    );

    res.json({
      success: true,
      data: sortedPurchases,
      total: purchaseHistory.length
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫—É–ø–æ–∫:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫—É–ø–æ–∫'
    });
  }
});

// GET /api/purchases/:id - –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–∫—É–ø–∫–∏
app.get('/api/purchases/:id', (req, res) => {
  try {
    const purchaseId = parseInt(req.params.id);
    console.log(`üìñ –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫—É–ø–∫–∏ ID: ${purchaseId}`);

    const purchase = purchaseHistory.find(p => p.id === purchaseId);

    if (!purchase) {
      return res.status(404).json({
        success: false,
        message: '–ó–∞–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    res.json({
      success: true,
      data: purchase
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫—É–ø–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫—É–ø–∫–∏'
    });
  }
});

// GET /api/products - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
app.get('/api/products', async (req, res) => {
  try {
    console.log('üõçÔ∏è –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫—É–ø–æ–∫...')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∑–∞–∫–∞–∑–æ–≤, –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π - –∑–∞–≥—Ä—É–∂–∞–µ–º
    const now = Date.now()
    if (cachedOrders.length === 0 || (now - lastOrdersFetchTime) > ORDERS_CACHE_DURATION) {
      await syncOrdersFromExternalAPI()
    }

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∑–∞–∫–∞–∑–æ–≤
    const productMap = new Map()

    cachedOrders.forEach(order => {
      if (order.items && Array.isArray(order.items)) {
        order.items.forEach(item => {
          const productName = item.product_name || item.name
          const productId = item.product_id || item.id || productName

          if (productName && !productMap.has(productId)) {
            productMap.set(productId, {
              id: productId,
              productName: productName,
              sku: `SKU-${productId}`,
              stockQty: Math.floor(Math.random() * 100) + 1, // Random stock for demo
              price: item.price || 0,
              category: 'Medication' // Default category
            })
          }
        })
      }
    })

    const products = Array.from(productMap.values())

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${products.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`)

    res.json({
      success: true,
      data: {
        products: products,
        total: products.length
      }
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', error)
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤'
    })
  }
})

// Mock data for expenses
let expenseIdCounter = 4;
let expenses = [
  {
    id: 1,
    date: '2025-06-05',
    category: '–õ–æ–≥–∏—Å—Ç–∏–∫–∞',
    description: '–î–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –¢—É—Ä—Ü–∏–∏',
    amount: 15000
  },
  {
    id: 2,
    date: '2025-06-04',
    category: '–†–µ–∫–ª–∞–º–∞',
    description: '–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ Google Ads',
    amount: 8500
  },
  {
    id: 3,
    date: '2025-06-03',
    category: '–ó–ü –ö—É—Ä—å–µ—Ä—É',
    description: '–ó–∞—Ä–ø–ª–∞—Ç–∞ –∫—É—Ä—å–µ—Ä–∞ –∑–∞ –º–∞–π',
    amount: 25000
  }
];

// GET /api/expenses - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤
app.get('/api/expenses', (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 25;
    const dateFrom = req.query.dateFrom;
    const dateTo = req.query.dateTo;

    console.log(`üí∞ –ó–∞–ø—Ä–æ—Å —Ä–∞—Å—Ö–æ–¥–æ–≤: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}, –ª–∏–º–∏—Ç ${limit}`);

    let filteredExpenses = [...expenses];

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º
    if (dateFrom) {
      filteredExpenses = filteredExpenses.filter(expense => expense.date >= dateFrom);
    }
    if (dateTo) {
      filteredExpenses = filteredExpenses.filter(expense => expense.date <= dateTo);
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
    filteredExpenses.sort((a, b) => new Date(b.date) - new Date(a.date));

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    const startIndex = (page - 1) * limit;
    const endIndex = startIndex + limit;
    const paginatedExpenses = filteredExpenses.slice(startIndex, endIndex);

    const response = {
      success: true,
      data: {
        expenses: paginatedExpenses,
        pagination: {
          page: page,
          limit: limit,
          totalItems: filteredExpenses.length,
          totalPages: Math.ceil(filteredExpenses.length / limit)
        }
      }
    };

    console.log(`‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ ${paginatedExpenses.length} —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ ${filteredExpenses.length}`);
    res.json(response);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤'
    });
  }
});

// POST /api/expenses - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥
app.post('/api/expenses', (req, res) => {
  try {
    const { date, category, description, amount } = req.body;

    console.log(`üí∞ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞: ${category} - ${amount}‚ÇΩ`);

    const newExpense = {
      id: expenseIdCounter++,
      date: date,
      category: category,
      description: description || '',
      amount: parseFloat(amount)
    };

    expenses.push(newExpense);

    console.log(`‚úÖ –†–∞—Å—Ö–æ–¥ —Å–æ–∑–¥–∞–Ω —Å ID: ${newExpense.id}`);

    res.json({
      success: true,
      message: '–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω',
      data: newExpense
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞'
    });
  }
});

// GET /api/expenses/:id - –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–∞—Å—Ö–æ–¥
app.get('/api/expenses/:id', (req, res) => {
  try {
    const expenseId = parseInt(req.params.id);
    console.log(`üìñ –ó–∞–ø—Ä–æ—Å —Ä–∞—Å—Ö–æ–¥–∞ ID: ${expenseId}`);

    const expense = expenses.find(e => e.id === expenseId);

    if (!expense) {
      return res.status(404).json({
        success: false,
        message: '–†–∞—Å—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    res.json({
      success: true,
      data: expense
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞'
    });
  }
});

// PUT /api/expenses/:id - –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
app.put('/api/expenses/:id', (req, res) => {
  try {
    const expenseId = parseInt(req.params.id);
    const { date, category, description, amount } = req.body;

    console.log(`‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ ID: ${expenseId}`);

    const expenseIndex = expenses.findIndex(e => e.id === expenseId);

    if (expenseIndex === -1) {
      return res.status(404).json({
        success: false,
        message: '–†–∞—Å—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    expenses[expenseIndex] = {
      ...expenses[expenseIndex],
      date: date,
      category: category,
      description: description,
      amount: parseFloat(amount)
    };

    console.log(`‚úÖ –†–∞—Å—Ö–æ–¥ ID: ${expenseId} –æ–±–Ω–æ–≤–ª–µ–Ω`);

    res.json({
      success: true,
      message: '–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
      data: expenses[expenseIndex]
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞'
    });
  }
});

// DELETE /api/expenses/:id - —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
app.delete('/api/expenses/:id', (req, res) => {
  try {
    const expenseId = parseInt(req.params.id);

    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ ID: ${expenseId}`);

    const expenseIndex = expenses.findIndex(e => e.id === expenseId);

    if (expenseIndex === -1) {
      return res.status(404).json({
        success: false,
        message: '–†–∞—Å—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    const deletedExpense = expenses.splice(expenseIndex, 1)[0];

    console.log(`‚úÖ –†–∞—Å—Ö–æ–¥ ID: ${expenseId} —É–¥–∞–ª–µ–Ω`);

    res.json({
      success: true,
      message: '–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
      data: deletedExpense
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞'
    });
  }
});

// Health check
app.get('/health', (req, res) => {
  res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—É—Ä—Å–æ–≤ –∏ –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
updateCurrencyCache();
syncOrdersFromExternalAPI();

app.listen(PORT, () => {
  console.log(`üöÄ Mock API Server running on http://localhost:${PORT}`);
  console.log(`üìä Health check: http://localhost:${PORT}/health`);
  console.log(`üìã Orders API: http://localhost:${PORT}/api/orders`);
  console.log(`üí∞ Currency API: http://localhost:${PORT}/api/currency/rates`);
  console.log(`üîÑ Refresh rates: http://localhost:${PORT}/api/currency/refresh`);
  console.log(`üîÑ Sync orders: http://localhost:${PORT}/api/sync-orders`);
  console.log(`üí∏ Expenses API: http://localhost:${PORT}/api/expenses`);
  console.log(`üõçÔ∏è Products API: http://localhost:${PORT}/api/products`);
  console.log(`üì¶ Purchases API: http://localhost:${PORT}/api/purchases`);
});
