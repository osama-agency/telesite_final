import type { Request, Response } from 'express'
import { PrismaClient } from '@prisma/client'
import { z } from 'zod'

const prisma = new PrismaClient()

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫—É–ø–∫–∏
const createPurchaseSchema = z.object({
  isUrgent: z.boolean().optional(),
  items: z.array(z.object({
    productId: z.number().nullable().optional(),
    name: z.string(),
    quantity: z.number().positive(),
    price: z.number().positive(),
    total: z.number().positive()
  })).min(1)
})

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–∫—É–ø–∫–∏
export const createPurchase = async (req: Request, res: Response) => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const validatedData = createPurchaseSchema.parse(req.body)

    // –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã
    const totalCost = validatedData.items.reduce((sum, item) => sum + item.total, 0)

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const purchase = await prisma.purchase.create({
      data: {
        totalCost,
        isUrgent: validatedData.isUrgent || false,
        items: {
          create: validatedData.items.map(item => ({
            productId: item.productId || null,
            name: item.name,
            quantity: item.quantity,
            price: item.price,
            total: item.total
          }))
        }
      },
      include: {
        items: true
      }
    })

    console.log(`–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–∫—É–ø–∫–∞ #${purchase.id} –Ω–∞ —Å—É–º–º—É ${totalCost} ‚ÇΩ`)

    res.status(201).json({
      success: true,
      data: purchase
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫—É–ø–∫–∏:', error)

    if (error instanceof z.ZodError) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
        details: error.errors
      })
    }

    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫—É–ø–∫–∏'
    })
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫—É–ø–æ–∫
export const getPurchases = async (req: Request, res: Response) => {
  try {
    const page = parseInt(req.query.page as string) || 1
    const limit = parseInt(req.query.limit as string) || 10
    const offset = (page - 1) * limit

    // –§–∏–ª—å—Ç—Ä—ã
    const isUrgent = req.query.isUrgent === 'true' ? true :
                     req.query.isUrgent === 'false' ? false : undefined

    const where: any = {}
    if (isUrgent !== undefined) {
      where.isUrgent = isUrgent
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫—É–ø–∫–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π

    const [purchases, total] = await Promise.all([
      prisma.purchase.findMany({
        where,
        include: {
          items: true
        },
        orderBy: {
          createdAt: 'desc'
        },
        skip: offset,
        take: limit
      }),
      prisma.purchase.count({ where })
    ])

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const transformedPurchases = purchases.map(purchase => ({
      id: purchase.id,
      sequenceId: purchase.sequenceId,
      date: purchase.createdAt.toISOString(),
      statusUpdatedAt: purchase.statusUpdatedAt.toISOString(),
      supplier: purchase.supplier || (purchase.isUrgent ? 'üî• –°—Ä–æ—á–Ω–∞—è –∑–∞–∫—É–ø–∫–∞' : '–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫'),
      items: purchase.items.map(item => ({
        id: item.id,
        product: {
          id: item.productId || 0,
          name: item.name,
          sku: `SKU-${item.productId || 0}`,
          currentStock: 0 // –ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å–æ–º –∫ —Ç–æ–≤–∞—Ä–∞–º
        },
        quantity: item.quantity,
        costTry: parseFloat(item.price.toString()),
        costRub: parseFloat(item.price.toString()) * 2.13, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
        totalRub: parseFloat(item.total.toString())
      })),
      totalAmount: parseFloat(purchase.totalCost.toString()),
      logisticsCost: parseFloat(purchase.logisticsCost.toString()),
      status: purchase.status as 'pending' | 'paid' | 'in_transit' | 'delivering' | 'received' | 'cancelled',
      isUrgent: purchase.isUrgent
    }))

    res.json({
      success: true,
      data: transformedPurchases,
      pagination: {
        page,
        limit,
        total,
        totalPages: Math.ceil(total / limit)
      }
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫—É–ø–æ–∫:', error)
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫—É–ø–æ–∫'
    })
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫—É–ø–∫–∏
export const getPurchaseById = async (req: Request, res: Response) => {
  try {
    const { id } = req.params

    const purchase = await prisma.purchase.findUnique({
      where: { id },
      include: {
        items: true
      }
    })

    if (!purchase) {
      return res.status(404).json({
        success: false,
        error: '–ó–∞–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      })
    }

    res.json({
      success: true,
      data: purchase
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫—É–ø–∫–∏:', error)
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫—É–ø–∫–∏'
    })
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫—É–ø–∫–∏
export const updatePurchaseStatus = async (req: Request, res: Response) => {
  try {
    const { id } = req.params
    const { status } = req.body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞

    const validStatuses = ['pending', 'paid', 'in_transit', 'delivering', 'received', 'cancelled']
    if (!validStatuses.includes(status)) {
      return res.status(400).json({
        success: false,
        error: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ${validStatuses.join(', ')}`
      })
    }

        const purchase = await prisma.purchase.update({
      where: { id },
      data: {
        status,
        statusUpdatedAt: new Date()
      },
      include: { items: true }
    })

    console.log(`üìã –°—Ç–∞—Ç—É—Å –∑–∞–∫—É–ø–∫–∏ #${purchase.sequenceId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "${status}"`)

    res.json({
      success: true,
      data: purchase,
      message: `–°—Ç–∞—Ç—É—Å –∑–∞–∫—É–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "${status}"`
    })
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error)

    if (error.code === 'P2025') {
      return res.status(404).json({
        success: false,
        error: '–ó–∞–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      })
    }

    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞'
    })
  }
}
