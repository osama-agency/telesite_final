import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω —Ç–æ–≤–∞—Ä–∞
export const getProductPriceHistory = async (req: Request, res: Response) => {
  try {
    const { productId } = req.params;

    const priceHistory = await prisma.productPrice.findMany({
      where: {
        productId: parseInt(productId)
      },
      orderBy: {
        effectiveDate: 'desc'
      },
      take: 30 // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –∑–∞–ø–∏—Å–µ–π
    });

    res.json({
      success: true,
      data: priceHistory
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω'
    });
  }
};

// –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ –ª–∏—Ä–∞—Ö
export const updateProductCostTRY = async (req: Request, res: Response) => {
  try {
    const { productId } = req.params;
    const { costPriceTRY, exchangeRate } = req.body;

    const costTRY = parseFloat(costPriceTRY);
    const rate = parseFloat(exchangeRate) || 2.13; // –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫—É—Ä—Å —Å –±—É—Ñ–µ—Ä–æ–º
    const costRUB = costTRY * rate;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
    const product = await prisma.product.update({
      where: {
        id: parseInt(productId)
      },
      data: {
        costPriceTRY: costTRY,
        costPrice: costRUB
      }
    });

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
    await prisma.productPrice.create({
      data: {
        productId: product.id,
        costPriceTRY: costTRY,
        costPriceRUB: costRUB,
        retailPrice: product.price,
        exchangeRate: rate,
        effectiveDate: new Date()
      }
    });

    console.log(`üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ ${product.name}: ${costTRY} ‚Ç∫ (${costRUB.toFixed(2)} ‚ÇΩ)`);

    res.json({
      success: true,
      data: {
        product,
        costRUB: costRUB.toFixed(2)
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏'
    });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ —Ç–æ–≤–∞—Ä–∞–º
export const getFinancialAnalytics = async (req: Request, res: Response) => {
  try {
    const products = await prisma.product.findMany({
      where: {
        isHidden: false,
        costPriceTRY: {
          not: null
        }
      },
      include: {
        productPrices: {
          orderBy: {
            effectiveDate: 'desc'
          },
          take: 1
        }
      }
    });

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç–∏
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

    const orders = await prisma.order.findMany({
      where: {
        orderDate: {
          gte: thirtyDaysAgo
        }
      },
      include: {
        items: true
      }
    });

    // –°—á–∏—Ç–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    const salesByProduct = new Map<string, { quantity: number; revenue: number }>();

    orders.forEach(order => {
      order.items.forEach(item => {
        const key = item.name;
        const current = salesByProduct.get(key) || { quantity: 0, revenue: 0 };
        current.quantity += item.quantity;
        current.revenue += parseFloat(item.total.toString());
        salesByProduct.set(key, current);
      });
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    const analytics = products.map(product => {
      const sales = salesByProduct.get(product.name) || { quantity: 0, revenue: 0 };
      const costTRY = product.costPriceTRY ? parseFloat(product.costPriceTRY.toString()) : 0;
      const costRUB = product.costPrice ? parseFloat(product.costPrice.toString()) : 0;
      const retailPrice = parseFloat(product.price.toString());

      // –†–∞—Å—á–µ—Ç –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
      const margin = retailPrice - costRUB;
      const marginPercent = costRUB > 0 ? (margin / retailPrice) * 100 : 0;

      // ROI (Return on Investment)
      const roi = costRUB > 0 ? ((retailPrice - costRUB) / costRUB) * 100 : 0;

      // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å (—Ä–∞–∑ –≤ –º–µ—Å—è—Ü)
      const turnover = product.stockQuantity > 0 ? sales.quantity / product.stockQuantity : 0;

      // –ü—Ä–∏–±—ã–ª—å –∑–∞ –ø–µ—Ä–∏–æ–¥
      const profit = sales.quantity * margin;

      return {
        id: product.id,
        name: product.name,
        costPriceTRY: costTRY,
        costPriceRUB: costRUB,
        retailPrice: retailPrice,
        margin: margin,
        marginPercent: marginPercent.toFixed(2),
        roi: roi.toFixed(2),
        stockQuantity: product.stockQuantity,
        salesQuantity: sales.quantity,
        salesRevenue: sales.revenue,
        turnover: turnover.toFixed(2),
        profit: profit.toFixed(2),
        stockValue: (product.stockQuantity * costRUB).toFixed(2),
        potentialRevenue: (product.stockQuantity * retailPrice).toFixed(2)
      };
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
    analytics.sort((a, b) => parseFloat(b.profit) - parseFloat(a.profit));

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalStats = {
      totalStockValue: analytics.reduce((sum, p) => sum + parseFloat(p.stockValue), 0).toFixed(2),
      totalPotentialRevenue: analytics.reduce((sum, p) => sum + parseFloat(p.potentialRevenue), 0).toFixed(2),
      totalSalesRevenue: analytics.reduce((sum, p) => sum + p.salesRevenue, 0).toFixed(2),
      totalProfit: analytics.reduce((sum, p) => sum + parseFloat(p.profit), 0).toFixed(2),
      averageMargin: (analytics.reduce((sum, p) => sum + parseFloat(p.marginPercent), 0) / analytics.length).toFixed(2),
      averageROI: (analytics.reduce((sum, p) => sum + parseFloat(p.roi), 0) / analytics.length).toFixed(2)
    };

    res.json({
      success: true,
      data: {
        products: analytics,
        stats: totalStats,
        period: '30 –¥–Ω–µ–π'
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏'
    });
  }
};

// –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∏–∑ Excel/CSV
export const bulkUpdatePrices = async (req: Request, res: Response) => {
  try {
    const { prices, exchangeRate } = req.body;
    const rate = parseFloat(exchangeRate) || 2.13;

    let updatedCount = 0;
    const errors: string[] = [];

    for (const item of prices) {
      try {
        const product = await prisma.product.findFirst({
          where: {
            name: {
              contains: item.name,
              mode: 'insensitive'
            }
          }
        });

        if (product) {
          const costTRY = parseFloat(item.costPriceTRY);
          const costRUB = costTRY * rate;

          await prisma.product.update({
            where: { id: product.id },
            data: {
              costPriceTRY: costTRY,
              costPrice: costRUB
            }
          });

          await prisma.productPrice.create({
            data: {
              productId: product.id,
              costPriceTRY: costTRY,
              costPriceRUB: costRUB,
              retailPrice: product.price,
              exchangeRate: rate,
              effectiveDate: new Date()
            }
          });

          updatedCount++;
        } else {
          errors.push(`–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: ${item.name}`);
        }
      } catch (error) {
        errors.push(`–û—à–∏–±–∫–∞ –¥–ª—è ${item.name}: ${error}`);
      }
    }

    res.json({
      success: true,
      data: {
        updated: updatedCount,
        total: prices.length,
        errors: errors
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω'
    });
  }
};
