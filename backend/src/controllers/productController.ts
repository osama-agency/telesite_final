import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export const getProducts = async (req: Request, res: Response) => {
  try {
    console.log('üì¶ –ó–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä showHidden –∏–∑ query
    const showHidden = req.query.showHidden === 'true';

    const products = await prisma.product.findMany({
      where: {
        price: {
          not: undefined
        },
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Ç–æ–≤–∞—Ä—ã, –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—Ä–æ—à–µ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ
        ...(showHidden ? {} : { isHidden: false })
      },
      orderBy: {
        name: 'asc'
      }
    });

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–∫—É–ø–æ–∫
    const analyticsProducts = products.map(product => {
      const stockQuantity = product.stockQuantity || 0;
      const avgSalesPerDay = 2.5; // —Å—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ
      const daysToZero = stockQuantity / avgSalesPerDay;
      const minStock = Math.max(Math.floor(stockQuantity * 0.3), 5);
      const toPurchase = stockQuantity < minStock ? minStock - stockQuantity + 7 : 0; // +7 –¥–Ω–µ–π –∑–∞–ø–∞—Å–∞

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
      let urgencyLevel = 'normal';
      if (daysToZero <= 3) urgencyLevel = 'critical';
      else if (daysToZero <= 7) urgencyLevel = 'warning';

      return {
        id: product.id,
        externalId: product.externalId,
        name: product.name,
        description: product.description,
        price: parseFloat(product.price.toString()),
        costPrice: product.costPrice ? parseFloat(product.costPrice.toString()) : null,
        stockQuantity: stockQuantity,
        stock_quantity: stockQuantity, // –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        brand: product.brand,
        category: product.brand, // –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—Ä–µ–Ω–¥ –∫–∞–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        mainIngredient: product.mainIngredient,
        main_ingredient: product.mainIngredient, // –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        dosageForm: product.dosageForm,
        dosage_form: product.dosageForm, // –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        packageQuantity: product.packageQuantity,
        package_quantity: product.packageQuantity, // –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        weight: product.weight,

        // –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        avgSalesPerDay,
        daysToZero: Math.round(daysToZero * 10) / 10,
        minStock,
        toPurchase,
        urgencyLevel,
        salesLast30Days: Math.floor(Math.random() * 50) + 10, // –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–ª—É—á–∞–π–Ω—ã–µ
        isHidden: product.isHidden,

        createdAt: product.createdAt,
        updatedAt: product.updatedAt
      };
    });

    res.json({
      success: true,
      data: analyticsProducts,
      count: analyticsProducts.length
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤'
    });
  }
};

export const getProductById = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;

    const product = await prisma.product.findUnique({
      where: {
        id: parseInt(id)
      }
    });

    if (!product) {
      return res.status(404).json({
        success: false,
        error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    res.json({
      success: true,
      data: product
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞'
    });
  }
};

export const updateProductCost = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const { costPrice } = req.body;

    const product = await prisma.product.update({
      where: {
        id: parseInt(id)
      },
      data: {
        costPrice: costPrice ? parseFloat(costPrice) : null
      }
    });

    console.log(`üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ ${product.name}: ${costPrice} ‚Ç∫`);

    res.json({
      success: true,
      data: product
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏'
    });
  }
};

export const hideProduct = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const { isHidden } = req.body;

    const product = await prisma.product.update({
      where: {
        id: parseInt(id)
      },
      data: {
        isHidden: isHidden !== undefined ? isHidden : true
      }
    });

    console.log(`üëÅÔ∏è ${isHidden ? '–°–∫—Ä—ã—Ç' : '–ü–æ–∫–∞–∑–∞–Ω'} —Ç–æ–≤–∞—Ä: ${product.name}`);

    res.json({
      success: true,
      data: product,
      message: `–¢–æ–≤–∞—Ä ${isHidden ? '—Å–∫—Ä—ã—Ç' : '–ø–æ–∫–∞–∑–∞–Ω'}`
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä—ã—Ç–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–∫—Ä—ã—Ç–∏—è —Ç–æ–≤–∞—Ä–∞'
    });
  }
};

export const updateProductStock = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const { stockQuantity } = req.body;

    const product = await prisma.product.update({
      where: {
        id: parseInt(id)
      },
      data: {
        stockQuantity: parseInt(stockQuantity),
        updatedAt: new Date()
      }
    });

    console.log(`üì¶ –û–±–Ω–æ–≤–ª–µ–Ω –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ ${product.name}: ${stockQuantity} —à—Ç`);

    res.json({
      success: true,
      data: product,
      message: '–û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞'
    });
  }
};

export const updateProductPrice = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const { price } = req.body;

    const product = await prisma.product.update({
      where: {
        id: parseInt(id)
      },
      data: {
        price: parseFloat(price),
        updatedAt: new Date()
      }
    });

    console.log(`üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ ${product.name}: ${price} ‚ÇΩ`);

    res.json({
      success: true,
      data: product,
      message: '–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã'
    });
  }
};

export const updateProductAnalytics = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const { avgDailySales30d, daysToZero, recommendedQty, trend, inTransit, minStock } = req.body;

    const updateData: any = {};

    if (avgDailySales30d !== undefined) updateData.avgDailySales30d = parseFloat(avgDailySales30d);
    if (daysToZero !== undefined) updateData.daysToZero = parseInt(daysToZero);
    if (recommendedQty !== undefined) updateData.recommendedQty = parseInt(recommendedQty);
    if (trend !== undefined) updateData.trend = trend;
    if (inTransit !== undefined) updateData.inTransit = parseInt(inTransit);
    if (minStock !== undefined) updateData.minStock = parseInt(minStock);

    updateData.updatedAt = new Date();

    const product = await prisma.product.update({
      where: {
        id: parseInt(id)
      },
      data: updateData
    });

    console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–∞ ${product.name}`);

    res.json({
      success: true,
      data: product,
      message: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏'
    });
  }
};
