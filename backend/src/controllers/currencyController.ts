import { Request, Response } from 'express';

interface CurrencyRate {
  CharCode: string;
  Name: string;
  Value: number;
  Previous: number;
  Nominal: number;
}

interface CBRApiResponse {
  Date: string;
  PreviousDate: string;
  PreviousURL: string;
  Timestamp: string;
  Valute: {
    [key: string]: CurrencyRate;
  };
}

// –ö—ç—à –∫—É—Ä—Å–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –¶–ë
let cachedRates: {
  current: number;
  currentWithBuffer: number;
  average30Days: number;
  lastUpdate: string;
} | null = null;

let lastFetchTime = 0;
const CACHE_DURATION = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
const BUFFER_PERCENT = 0.05; // 5% –±—É—Ñ–µ—Ä

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –ª–∏—Ä—ã –æ—Ç –¶–ë –†–§
 */
async function fetchCurrencyFromCBR(): Promise<number> {
  try {
    console.log('üè¶ –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞ –ª–∏—Ä—ã –æ—Ç –¶–ë –†–§...');

    const response = await fetch('https://www.cbr-xml-daily.ru/daily_json.js');
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json() as CBRApiResponse;

    // –ö—É—Ä—Å —Ç—É—Ä–µ—Ü–∫–æ–π –ª–∏—Ä—ã (TRY)
    const tryRate = data.Valute.TRY;
    if (!tryRate) {
      throw new Error('TRY currency not found in CBR response');
    }

    // –¶–ë –¥–∞–µ—Ç –∫—É—Ä—Å –∑–∞ Nominal –ª–∏—Ä (–æ–±—ã—á–Ω–æ 10)
    // –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –∑–∞ 1 –ª–∏—Ä—É
    const rubPerTry = tryRate.Value / tryRate.Nominal;

    console.log(`üí± –ö—É—Ä—Å –¶–ë: 1 ‚Ç∫ = ${rubPerTry.toFixed(4)} ‚ÇΩ (–∑–∞ ${tryRate.Nominal} –ª–∏—Ä: ${tryRate.Value} ‚ÇΩ)`);

    return rubPerTry;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –æ—Ç –¶–ë:', error);
    // Fallback –∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º—É –∫—É—Ä—Å—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return 3.45;
  }
}

/**
 * –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∫—É—Ä—Å–∞ –∑–∞ 30 –¥–Ω–µ–π (–∑–∞–≥–ª—É—à–∫–∞)
 * –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –∫—É—Ä—Å–∞–º–∏
 */
function calculateAverage30Days(currentRate: number): number {
  // –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞
  const deviation = (Math.random() - 0.5) * 0.1; // ¬±5%
  return currentRate * (1 + deviation);
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∫—É—Ä—Å–æ–≤
 */
async function updateCurrencyCache(): Promise<void> {
  try {
    const currentRate = await fetchCurrencyFromCBR();
    const currentWithBuffer = currentRate * (1 + BUFFER_PERCENT);
    const average30Days = calculateAverage30Days(currentRate);

    cachedRates = {
      current: currentRate,
      currentWithBuffer: currentWithBuffer,
      average30Days: average30Days,
      lastUpdate: new Date().toISOString()
    };

    lastFetchTime = Date.now();

    console.log(`‚úÖ –ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:
      - –¢–µ–∫—É—â–∏–π: ${currentRate.toFixed(4)} ‚ÇΩ/‚Ç∫
      - –° –±—É—Ñ–µ—Ä–æ–º (+5%): ${currentWithBuffer.toFixed(4)} ‚ÇΩ/‚Ç∫
      - –°—Ä–µ–¥–Ω–∏–π –∑–∞ 30 –¥–Ω–µ–π: ${average30Days.toFixed(4)} ‚ÇΩ/‚Ç∫`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∫—É—Ä—Å–æ–≤:', error);
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
 */
export const getCurrencyRates = async (req: Request, res: Response) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à
    const now = Date.now();
    if (!cachedRates || (now - lastFetchTime) > CACHE_DURATION) {
      await updateCurrencyCache();
    }

    if (!cachedRates) {
      // –ï—Å–ª–∏ –∫—ç—à –≤—Å–µ –µ—â–µ –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      cachedRates = {
        current: 3.45,
        currentWithBuffer: 3.45 * (1 + BUFFER_PERCENT),
        average30Days: 3.42,
        lastUpdate: new Date().toISOString()
      };
    }

    res.json({
      success: true,
      data: {
        current: parseFloat(cachedRates.current.toFixed(4)),
        currentWithBuffer: parseFloat(cachedRates.currentWithBuffer.toFixed(4)),
        average30Days: parseFloat(cachedRates.average30Days.toFixed(4)),
        buffer: BUFFER_PERCENT,
        lastUpdate: cachedRates.lastUpdate,
        source: '–¶–ë –†–§',
        nextUpdate: new Date(lastFetchTime + CACHE_DURATION).toISOString()
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç'
    });
  }
};

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 */
export const forceUpdateCurrencyRates = async (req: Request, res: Response) => {
  try {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤...');
    await updateCurrencyCache();

    res.json({
      success: true,
      message: '–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
      data: cachedRates
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç'
    });
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
updateCurrencyCache();
