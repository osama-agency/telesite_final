import { PrismaClient } from '@prisma/client';
import { Decimal } from '@prisma/client/runtime/library';

const prisma = new PrismaClient();

interface ExpenseBreakdown {
  delivery: number;      // –ö—É—Ä—å–µ—Ä—É –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É
  logistics: number;     // –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∑–∞–∫—É–ø–∫–∏
  advertising: number;   // –†–µ–∫–ª–∞–º–∞
  other: number;        // –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
  total: number;        // –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
}

interface ProductAnalytics {
  productId: number;
  productName: string;
  stock: number;
  inTransit: number;
  costLira: number;
  costRub: number;
  avgRetailPrice: number;
  avgDailyConsumption: number;
  daysUntilZero: number;
  margin: number;
  marginPercent: number;
  totalSales: number;
  totalRevenue: number;
  expenses: ExpenseBreakdown;
  fullCostPerUnit: number;
}

export class ProductAnalyticsService {
  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É
  private static readonly DELIVERY_COST_PER_UNIT = 350; // ‚ÇΩ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã —Å –±—É—Ñ–µ—Ä–æ–º
  private static async getCurrentExchangeRate(): Promise<number> {
    try {
      const latestRate = await prisma.exchangeRate.findFirst({
        where: { currency: 'TRY' },
        orderBy: { effectiveDate: 'desc' }
      });

      if (latestRate) {
        return Number(latestRate.rateWithBuffer);
      }

      // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫—É—Ä—Å —Å –±—É—Ñ–µ—Ä–æ–º 5%
      return 2.1264; // 2.0252 * 1.05
    } catch (error) {
      console.error('Error fetching exchange rate:', error);
      return 2.1264;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ –ø–µ—Ä–∏–æ–¥
  private static async getExpensesByCategory(from: Date, to: Date): Promise<{[key: string]: number}> {
    try {
      const expenses = await prisma.expense.groupBy({
        by: ['category'],
        where: {
          date: {
            gte: from,
            lte: to
          }
        },
        _sum: {
          amount: true
        }
      });

      const result: {[key: string]: number} = {};
      expenses.forEach(exp => {
        result[exp.category] = Number(exp._sum.amount || 0);
      });

      return result;
    } catch (error) {
      console.error('Error fetching expenses by category:', error);
      return {};
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º
  static async getProductsAnalytics(from: Date, to: Date): Promise<ProductAnalytics[]> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
      const products = await prisma.product.findMany({
        where: { isHidden: false }
      });

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
      const exchangeRate = await this.getCurrentExchangeRate();

      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      const expensesByCategory = await this.getExpensesByCategory(from, to);
      const logisticsCosts = expensesByCategory['–õ–æ–≥–∏—Å—Ç–∏–∫–∞'] || 0;
      const advertisingCosts = expensesByCategory['–†–µ–∫–ª–∞–º–∞'] || 0;
      const otherCosts = expensesByCategory['–ü—Ä–æ—á–µ–µ'] || 0;

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
      const orders = await prisma.order.findMany({
        where: {
          orderDate: {
            gte: from,
            lte: to
          },
          status: {
            notIn: ['cancelled', 'refunded']
          }
        },
        include: {
          items: true
        }
      });

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
      let totalUnitsSold = 0;
      const productSalesMap = new Map<string, { quantity: number; revenue: number; prices: number[] }>();

      orders.forEach(order => {
        order.items.forEach(item => {
          if (item.name) {
            const existing = productSalesMap.get(item.name) || { quantity: 0, revenue: 0, prices: [] };
            existing.quantity += item.quantity;
            existing.revenue += Number(item.total);
            existing.prices.push(Number(item.price));
            productSalesMap.set(item.name, existing);
            totalUnitsSold += item.quantity;
          }
        });
      });

      // –†–∞—Å—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
      const logisticsPerUnit = totalUnitsSold > 0 ? logisticsCosts / totalUnitsSold : 0;
      const advertisingPerUnit = totalUnitsSold > 0 ? advertisingCosts / totalUnitsSold : 0;
      const otherPerUnit = totalUnitsSold > 0 ? otherCosts / totalUnitsSold : 0;

      // –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –≤ –ø–µ—Ä–∏–æ–¥–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏
      const now = new Date();
      const actualEndDate = new Date(Math.min(to.getTime(), now.getTime()));
      const daysDiff = Math.max(1, Math.ceil((actualEndDate.getTime() - from.getTime()) / (1000 * 60 * 60 * 24)));

      console.log(`üìÖ Backend —Ä–∞—Å—á–µ—Ç –ø–µ—Ä–∏–æ–¥–∞: –Ω–∞—á–∞–ª–æ=${from.toISOString().split('T')[0]}, –∫–æ–Ω–µ—Ü=${to.toISOString().split('T')[0]}, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω–µ—Ü=${actualEndDate.toISOString().split('T')[0]}, –¥–Ω–µ–π=${daysDiff}`);

      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: ${orders.length}`);
      console.log(`üì¶ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞: ${totalUnitsSold}`);

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
      const analytics: ProductAnalytics[] = [];

      for (const product of products) {
        const salesData = productSalesMap.get(product.name) || { quantity: 0, revenue: 0, prices: [] };

        // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ Atominex
        if (product.name.toLowerCase().includes('atominex')) {
          console.log(`üîç [${product.name}] –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂:`, {
            quantity: salesData.quantity,
            revenue: salesData.revenue,
            pricesCount: salesData.prices.length,
            avgPrice: salesData.prices.length > 0 ? salesData.prices.reduce((a, b) => a + b, 0) / salesData.prices.length : 0,
            periodDays: daysDiff,
            avgDailyConsumption: salesData.quantity / daysDiff
          });
        }

        // –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –ª–∏—Ä–∞—Ö
        const costLira = Number(product.costPriceTRY || 0);

        // –ë–∞–∑–æ–≤–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ –∑–∞–∫—É–ø–∫–∞)
        const baseCostRub = costLira * exchangeRate;

        // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
        const expenses: ExpenseBreakdown = {
          delivery: this.DELIVERY_COST_PER_UNIT,
          logistics: Math.round(logisticsPerUnit * 100) / 100,
          advertising: Math.round(advertisingPerUnit * 100) / 100,
          other: Math.round(otherPerUnit * 100) / 100,
          total: 0
        };
        expenses.total = expenses.delivery + expenses.logistics + expenses.advertising + expenses.other;

        // –ü–æ–ª–Ω–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∫–ª—é—á–∞—è –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã
        const fullCostPerUnit = baseCostRub + expenses.total;

        // –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
        const avgRetailPrice = salesData.prices.length > 0
          ? salesData.prices.reduce((a, b) => a + b, 0) / salesData.prices.length
          : Number(product.price || 0);

        // –°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤ –¥–µ–Ω—å
        const avgDailyConsumption = salesData.quantity / daysDiff;

        // –î–Ω–µ–π –¥–æ –Ω—É–ª—è
        const daysUntilZero = avgDailyConsumption > 0
          ? Math.floor(product.stockQuantity / avgDailyConsumption)
          : 999;

        // –ú–∞—Ä–∂–∞ –∏ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –ü–û–õ–ù–û–ô —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
        const margin = avgRetailPrice - fullCostPerUnit;
        const marginPercent = fullCostPerUnit > 0 ? (margin / fullCostPerUnit) * 100 : 0;

        analytics.push({
          productId: product.id,
          productName: product.name,
          stock: product.stockQuantity,
          inTransit: product.inTransit,
          costLira,
          costRub: Math.round(baseCostRub * 100) / 100,
          avgRetailPrice: Math.round(avgRetailPrice * 100) / 100,
          avgDailyConsumption: Math.round(avgDailyConsumption * 100) / 100,
          daysUntilZero,
          margin: Math.round(margin * 100) / 100,
          marginPercent: Math.round(marginPercent * 100) / 100,
          totalSales: salesData.quantity,
          totalRevenue: Math.round(salesData.revenue * 100) / 100,
          expenses,
          fullCostPerUnit: Math.round(fullCostPerUnit * 100) / 100
        });
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (—É–±—ã–≤–∞–Ω–∏–µ)
      analytics.sort((a, b) => b.marginPercent - a.marginPercent);

      return analytics;
    } catch (error) {
      console.error('Error calculating product analytics:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É
  static async getProductAnalytics(productId: number, from: Date, to: Date): Promise<ProductAnalytics | null> {
    const analytics = await this.getProductsAnalytics(from, to);
    return analytics.find(a => a.productId === productId) || null;
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã
  static async updateExchangeRate(rate: number, bufferPercent: number = 5): Promise<void> {
    try {
      const rateWithBuffer = rate * (1 + bufferPercent / 100);

      await prisma.exchangeRate.create({
        data: {
          currency: 'TRY',
          rate: new Decimal(rate),
          rateWithBuffer: new Decimal(rateWithBuffer),
          bufferPercent: new Decimal(bufferPercent),
          source: 'CBR',
          effectiveDate: new Date()
        }
      });
    } catch (error) {
      console.error('Error updating exchange rate:', error);
      throw error;
    }
  }
}
