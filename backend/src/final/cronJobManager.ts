// ‚úÖ –ì–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª. DO NOT MODIFY. –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ –∏ –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—é AI –∏–ª–∏ –¥—Ä—É–≥–∏–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º.

import * as cron from 'node-cron';
import { autoSyncAll } from './syncController';

class CronJobManager {
  private syncTask: cron.ScheduledTask | null = null;
  private isRunning = false;
  private lastRunTime: Date | null = null;
  private nextRunTime: Date | null = null;

  /**
   * –ó–∞–ø—É—Å–∫ cron –∑–∞–¥–∞—á
   */
  start(): void {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è Cron jobs are already running');
      return;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    this.syncTask = cron.schedule('*/5 * * * *', async () => {
      try {
        this.lastRunTime = new Date();
        console.log(`üîÑ [${this.lastRunTime.toISOString()}] Starting automatic sync...`);

        const results = await autoSyncAll();

        console.log(`‚úÖ [${new Date().toISOString()}] Automatic sync completed successfully`);
        console.log(`üìä Sync results:`, results);

        this.updateNextRunTime();
      } catch (error) {
        console.error(`‚ùå [${new Date().toISOString()}] Automatic sync failed:`, error);
      }
    }, {
      scheduled: false,
      timezone: process.env.TZ || 'UTC'
    });

    this.syncTask.start();
    this.isRunning = true;
    this.updateNextRunTime();

    console.log('üöÄ Cron jobs started successfully');
    console.log(`‚è∞ Will sync every 5 minutes`);
    console.log(`üïê Next sync at: ${this.nextRunTime?.toISOString()}`);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å—Ä–∞–∑—É
    this.runManualSync();
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ cron –∑–∞–¥–∞—á
   */
  stop(): void {
    if (!this.isRunning) {
      console.log('‚ö†Ô∏è Cron jobs are not running');
      return;
    }

    if (this.syncTask) {
      this.syncTask.stop();
      this.syncTask = null;
    }

    this.isRunning = false;
    this.nextRunTime = null;

    console.log('üõë Cron jobs stopped');
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å cron –∑–∞–¥–∞—á
   */
  getStatus(): {
    isRunning: boolean;
    lastRunTime: Date | null;
    nextRunTime: Date | null;
    schedule: string;
    timezone: string;
  } {
    return {
      isRunning: this.isRunning,
      lastRunTime: this.lastRunTime,
      nextRunTime: this.nextRunTime,
      schedule: 'Every 5 minutes',
      timezone: process.env.TZ || 'UTC'
    };
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
   */
  private updateNextRunTime(): void {
    if (this.isRunning) {
      const now = new Date();
      const nextRun = new Date(now);
      nextRun.setMinutes(Math.ceil(now.getMinutes() / 5) * 5, 0, 0);

      // –ï—Å–ª–∏ –º—ã —Ç–æ—á–Ω–æ –Ω–∞ 5-–º–∏–Ω—É—Ç–Ω–æ–π –æ—Ç–º–µ—Ç–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º 5 –º–∏–Ω—É—Ç
      if (nextRun.getTime() === now.getTime()) {
        nextRun.setMinutes(nextRun.getMinutes() + 5);
      }

      this.nextRunTime = nextRun;
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é
   */
  async runManualSync(): Promise<any> {
    try {
      console.log(`üîÑ [${new Date().toISOString()}] Manual sync triggered...`);

      const results = await autoSyncAll();

      console.log(`‚úÖ [${new Date().toISOString()}] Manual sync completed successfully`);
      console.log(`üìä Sync results:`, results);

      return {
        success: true,
        results,
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      console.error(`‚ùå [${new Date().toISOString()}] Manual sync failed:`, error);

      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        timestamp: new Date().toISOString()
      };
    }
  }
}

// –°–æ–∑–¥–∞–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const cronJobManager = new CronJobManager();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export default cronJobManager;
