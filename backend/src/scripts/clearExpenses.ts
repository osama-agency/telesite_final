import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function clearTestExpenses() {
  try {
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π —Ä–∞—Å—Ö–æ–¥–æ–≤...');

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
    const deleteResult = await prisma.expense.deleteMany({});
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${deleteResult.count}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞
    const remainingExpenses = await prisma.expense.findMany();
    console.log(`üìä –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤: ${remainingExpenses.length}`);

    if (remainingExpenses.length === 0) {
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –æ—á–∏—â–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é');
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–∞—Å—Ö–æ–¥–æ–≤:', error);
  } finally {
    await prisma.$disconnect();
  }
}

clearTestExpenses();
