const express = require('express');
const cors = require('cors');

const app = express();
const PORT = 3012;

// Middleware
app.use(cors());
app.use(express.json());

// Mock data - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ –±—É–¥–µ—Ç –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
let products = [
  {
    id: 1,
    name: "Attex 10 mg",
    stockQuantity: 46,
    avgDailySales30d: 2.3,
    daysToZero: 20,
    lastPurchaseDate: "2024-01-15",
    recommendedQty: 15,
    trend: "STABLE",
    inTransit: 5,
    deliveryDays: 14,
    minStock: 10,
    price: 120.50,
    costPrice: 85.00
  },
  {
    id: 2,
    name: "Atominex 40 mg",
    stockQuantity: 59,
    avgDailySales30d: 1.8,
    daysToZero: 33,
    lastPurchaseDate: "2024-01-10",
    recommendedQty: 0,
    trend: "GROWING",
    inTransit: 12,
    deliveryDays: 14,
    minStock: 8,
    price: 245.00,
    costPrice: 180.00
  },
  {
    id: 3,
    name: "Risperdal 1 Mg/ml —Å–∏—Ä–æ–ø",
    stockQuantity: 3,
    avgDailySales30d: 0.5,
    daysToZero: 6,
    lastPurchaseDate: "2024-01-05",
    recommendedQty: 20,
    trend: "FALLING",
    inTransit: 0,
    deliveryDays: 21,
    minStock: 5,
    price: 890.00,
    costPrice: 650.00
  }
];

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
const calculateProductAnalytics = (product) => {
  // 1. –†–∞—Å—á–µ—Ç –¥–Ω–µ–π –¥–æ –Ω—É–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤
  const daysToZero = product.avgDailySales30d > 0
    ? Math.ceil(product.stockQuantity / product.avgDailySales30d)
    : 999;

  // 2. –†–∞—Å—á–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –∑–∞–∫—É–ø–∫–∏
  // –§–æ—Ä–º—É–ª–∞: (—Å—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ * –¥–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ + –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å) - —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ - –≤ –ø—É—Ç–∏
  const safetyStock = product.minStock || 5;
  const deliveryNeed = Math.ceil(product.avgDailySales30d * product.deliveryDays);
  const totalNeed = deliveryNeed + safetyStock;
  const recommendedQty = Math.max(0, totalNeed - product.stockQuantity - product.inTransit);

  // 3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  const criticalLevel = product.deliveryDays || 14;
  let urgencyLevel = 'normal';

  if (daysToZero <= 7) {
    urgencyLevel = 'critical';
  } else if (daysToZero <= criticalLevel) {
    urgencyLevel = 'warning';
  }

  return {
    ...product,
    daysToZero,
    recommendedQty,
    urgencyLevel,
    needsPurchase: recommendedQty > 0,
    criticalStock: daysToZero < criticalLevel
  };
};

// API Routes

// –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º
app.get('/api/analytics/products', (req, res) => {
  console.log('üìä –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º');

  try {
    const analyticsData = products.map(calculateProductAnalytics);

    // –§–∏–ª—å—Ç—Ä—ã
    const { filter, minDays, maxDays } = req.query;

    let filteredData = analyticsData;

    if (filter === 'critical') {
      filteredData = analyticsData.filter(p => p.criticalStock);
    } else if (filter === 'needsPurchase') {
      filteredData = analyticsData.filter(p => p.needsPurchase);
    } else if (filter === 'lowStock') {
      filteredData = analyticsData.filter(p => p.daysToZero < 14);
    }

    if (minDays) {
      filteredData = filteredData.filter(p => p.daysToZero >= parseInt(minDays));
    }

    if (maxDays) {
      filteredData = filteredData.filter(p => p.daysToZero <= parseInt(maxDays));
    }

    const summary = {
      totalProducts: analyticsData.length,
      criticalProducts: analyticsData.filter(p => p.criticalStock).length,
      needsPurchase: analyticsData.filter(p => p.needsPurchase).length,
      totalRecommendedQty: analyticsData.reduce((sum, p) => sum + p.recommendedQty, 0),
      averageDaysToZero: Math.round(
        analyticsData.reduce((sum, p) => sum + p.daysToZero, 0) / analyticsData.length
      )
    };

    res.json({
      success: true,
      data: filteredData,
      summary,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤'
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É
app.get('/api/analytics/products/:id', (req, res) => {
  console.log(`üìä –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —Ç–æ–≤–∞—Ä—É ID: ${req.params.id}`);

  try {
    const product = products.find(p => p.id === parseInt(req.params.id));

    if (!product) {
      return res.status(404).json({
        success: false,
        error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    const analytics = calculateProductAnalytics(product);

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    const detailedAnalytics = {
      ...analytics,
      calculations: {
        dailySalesAvg: product.avgDailySales30d,
        daysToZeroCalc: `${product.stockQuantity} √∑ ${product.avgDailySales30d} = ${analytics.daysToZero} –¥–Ω–µ–π`,
        recommendedCalc: `(${product.avgDailySales30d} √ó ${product.deliveryDays} + ${product.minStock}) - ${product.stockQuantity} - ${product.inTransit} = ${analytics.recommendedQty}`,
        safetyStockDays: Math.ceil(product.minStock / product.avgDailySales30d),
        turnoverRate: Math.round((product.avgDailySales30d * 30) / product.stockQuantity * 100) / 100
      }
    };

    res.json({
      success: true,
      data: detailedAnalytics,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞'
    });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (cron endpoint)
app.post('/api/analytics/refresh', async (req, res) => {
  console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤...');

  try {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API
    const updatedProducts = products.map(product => {
      // –°–∏–º—É–ª—è—Ü–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂
      const salesFluctuation = (Math.random() - 0.5) * 0.4; // ¬±20%
      const newAvgSales = Math.max(0.1, product.avgDailySales30d * (1 + salesFluctuation));

      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
      let trend = 'STABLE';
      if (newAvgSales > product.avgDailySales30d * 1.1) {
        trend = 'GROWING';
      } else if (newAvgSales < product.avgDailySales30d * 0.9) {
        trend = 'FALLING';
      }

      return {
        ...product,
        avgDailySales30d: Math.round(newAvgSales * 100) / 100,
        trend,
        lastUpdated: new Date().toISOString()
      };
    });

    products = updatedProducts;

    const analytics = products.map(calculateProductAnalytics);

    console.log('‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

    res.json({
      success: true,
      message: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
      updatedCount: products.length,
      timestamp: new Date().toISOString(),
      summary: {
        critical: analytics.filter(p => p.criticalStock).length,
        needsPurchase: analytics.filter(p => p.needsPurchase).length
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏'
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è
app.get('/api/analytics/products/low-stock', (req, res) => {
  console.log('‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º');

  try {
    const threshold = parseInt(req.query.days) || 14;
    const analyticsData = products.map(calculateProductAnalytics);
    const lowStockProducts = analyticsData.filter(p => p.daysToZero < threshold);

    res.json({
      success: true,
      data: lowStockProducts,
      threshold,
      count: lowStockProducts.length,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö'
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–∫—É–ø–∫–µ
app.get('/api/analytics/purchase-recommendations', (req, res) => {
  console.log('üí∞ –ó–∞–ø—Ä–æ—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∑–∞–∫—É–ø–∫–µ');

  try {
    const analyticsData = products.map(calculateProductAnalytics);
    const recommendations = analyticsData
      .filter(p => p.recommendedQty > 0)
      .map(product => ({
        productId: product.id,
        productName: product.name,
        currentStock: product.stockQuantity,
        inTransit: product.inTransit,
        recommendedQty: product.recommendedQty,
        estimatedCost: product.recommendedQty * product.costPrice,
        urgency: product.urgencyLevel,
        daysToZero: product.daysToZero,
        reason: product.daysToZero < 7
          ? '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫'
          : product.daysToZero < 14
          ? '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –æ—Å—Ç–∞—Ç–∫–µ'
          : '–ü–ª–∞–Ω–æ–≤–∞—è –∑–∞–∫—É–ø–∫–∞'
      }))
      .sort((a, b) => a.daysToZero - b.daysToZero);

    const totalCost = recommendations.reduce((sum, rec) => sum + rec.estimatedCost, 0);
    const totalQty = recommendations.reduce((sum, rec) => sum + rec.recommendedQty, 0);

    res.json({
      success: true,
      data: recommendations,
      summary: {
        totalItems: recommendations.length,
        totalQuantity: totalQty,
        totalEstimatedCost: Math.round(totalCost * 100) / 100,
        criticalItems: recommendations.filter(r => r.urgency === 'critical').length
      },
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π'
    });
  }
});

// Health check
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    service: 'Analytics Service',
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log('üöÄ Analytics Service –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:' + PORT);
  console.log('üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: http://localhost:' + PORT + '/api/analytics/products');
  console.log('‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º: http://localhost:' + PORT + '/api/analytics/products/low-stock');
  console.log('üí∞ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–∫—É–ø–∫–µ: http://localhost:' + PORT + '/api/analytics/purchase-recommendations');
  console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: POST http://localhost:' + PORT + '/api/analytics/refresh');
});
