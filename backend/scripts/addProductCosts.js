const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// –î–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ª–∏—Ä–∞—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
const productCosts = [
  { name: 'Atominex 10 mg', costPrice: 455 },
  { name: 'Abilify 15 mg', costPrice: 430 },
  { name: 'Attex 100 mg', costPrice: 1170 },
  { name: 'Atominex 25 mg', costPrice: 765 },
  { name: 'Atominex 60 mg', costPrice: 595 },
  { name: 'Atominex 40 mg', costPrice: 415 },
  { name: 'Atominex 18 mg', costPrice: 605 },
  { name: 'Atominex 80 mg', costPrice: 775 },
  { name: 'Attex 4 mg (—Å–∏—Ä–æ–ø)', costPrice: 720 },
  { name: 'Attex 10 mg', costPrice: 420 },
  { name: 'Atominex 100 mg', costPrice: 970 },
  { name: 'Attex 18 mg', costPrice: 740 },
  { name: 'Attex 80 mg', costPrice: 960 },
  { name: 'HHS A1 L-Carnitine Lepidium', costPrice: 280 },
  { name: '–ú–∏—Ä–µ–Ω–∞ 20 –º–∫–≥/24 —á–∞—Å–∞', costPrice: 1300 },
  { name: 'Arislow 1 mg', costPrice: 255 },
  { name: 'Arislow 2 mg', costPrice: 285 },
  { name: 'Arislow 3 mg', costPrice: 310 },
  { name: 'Arislow 4 mg', costPrice: 340 },
  { name: 'Attex 25 mg', costPrice: 797 },
  { name: 'Attex 40 mg', costPrice: 495 },
  { name: 'Attex 60 mg', costPrice: 730 },
  { name: 'Abilify 5 mg', costPrice: 300 },
  { name: 'Risperdal 1 Mg/ml —Å–∏—Ä–æ–ø', costPrice: 245 },
  { name: 'Salazopyrin 500 mg', costPrice: 220 },
  { name: 'Euthyrox 100 mcg', costPrice: 105 }
];

async function addProductCosts() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤...');

  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    console.log('üì° –ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–≤–∞—Ä—ã –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API...');
    const response = await fetch('https://strattera.tgapp.online/api/v1/products', {
      headers: {
        'Authorization': '8cM9wVBrY3p56k4L1VBpIBwOsw'
      }
    });

    const apiProducts = await response.json();
    console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ ${apiProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ API`);

    let created = 0;
    let updated = 0;

    for (const apiProduct of apiProducts) {
      if (!apiProduct.price || apiProduct.price === null) {
        console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é —Ç–æ–≤–∞—Ä –±–µ–∑ —Ü–µ–Ω—ã: ${apiProduct.name}`);
        continue;
      }

      // –ò—â–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
      const costData = productCosts.find(p => p.name === apiProduct.name);
      const costPrice = costData ? costData.costPrice : null;

      try {
        // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
        const existingProduct = await prisma.product.findFirst({
          where: { externalId: apiProduct.id }
        });

        if (existingProduct) {
          await prisma.product.update({
            where: { id: existingProduct.id },
            data: {
              name: apiProduct.name,
              description: apiProduct.description,
              price: parseFloat(apiProduct.price),
              costPrice: costPrice,
              stockQuantity: apiProduct.stock_quantity || 0,
              brand: apiProduct.brand,
              mainIngredient: apiProduct.main_ingredient,
              dosageForm: apiProduct.dosage_form,
              packageQuantity: apiProduct.package_quantity,
              weight: apiProduct.weight
            }
          });
          updated++;
          if (costPrice) {
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: ${apiProduct.name} - —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: ${costPrice} ‚Ç∫`);
          } else {
            console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω: ${apiProduct.name} - –±–µ–∑ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏`);
          }
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
          await prisma.product.create({
            data: {
              externalId: apiProduct.id,
              name: apiProduct.name,
              description: apiProduct.description,
              price: parseFloat(apiProduct.price),
              costPrice: costPrice,
              stockQuantity: apiProduct.stock_quantity || 0,
              brand: apiProduct.brand,
              mainIngredient: apiProduct.main_ingredient,
              dosageForm: apiProduct.dosage_form,
              packageQuantity: apiProduct.package_quantity,
              weight: apiProduct.weight
            }
          });
          created++;
          if (costPrice) {
            console.log(`üÜï –°–æ–∑–¥–∞–Ω: ${apiProduct.name} - —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: ${costPrice} ‚Ç∫`);
          } else {
            console.log(`üÜï –°–æ–∑–¥–∞–Ω: ${apiProduct.name} - –±–µ–∑ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏`);
          }
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å —Ç–æ–≤–∞—Ä–æ–º ${apiProduct.name}:`, error.message);
      }
    }

    console.log('\nüéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${created}`);
    console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${updated}`);
    console.log(`üí∞ –¢–æ–≤–∞—Ä–æ–≤ —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é: ${productCosts.length}`);

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
addProductCosts();
